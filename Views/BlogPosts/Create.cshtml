@using AstraBlog.Enums;
@using AstraBlog.Services.Interfaces

@inject IImageService _ImageService
@inject IBlogPostService _BlogPostService
@model AstraBlog.Models.BlogPost

@{
    ViewData["Title"] = "Create";
}

<main class="container mt-5">
    <form asp-action="Create" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">
            <div class="col-12 col-lg-4">
                <div class="form-group">
                    <label asp-for="Title" class="control-label"></label>
                    <input asp-for="Title" class="form-control" />
                    <span asp-validation-for="Title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="Abstract" class="control-label"></label>
                    <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
                    <span asp-validation-for="Abstract" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CategoryId" class="control-label">Category</label>
                    <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryList"></select>
                </div>
                <div class="form-group">
                    <label asp-for="ImageFile" class="control-label">Blog Post Image</label>
                    <img class="img-fluid border rounded-3 m-2" style="max-height: 250px;" src="~/img/DefaultBlogImage.png" id="blogImage">
                    <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                           onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
                </div>
            </div>
            <div class="col-12 col-lg-8">
                <div class="form-group">
                    <label asp-for="Content" class="control-label"></label>
                    <textarea asp-for="Content" class="editor form-control"></textarea>
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group" id="tagContainer">
                    <label asp-for="Tags"></label>
                    <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />

                    <div class="tagcloud axil-single-widget mt-2" style="display: none;">
                        @foreach (Tag tag in await _BlogPostService.GetTagsAsync())
                        {
                            <a onclick="addTag(this)">@tag.Name</a>
                        }
                    </div>

                </div>


            </div>
        </div>
        <div class="form-group d-flex justify-content-end mt-3">
            <div class="form-group form-check d-flex my-auto">
                <label class="form-check-label my-auto me-4">
                    <input class="form-check-input me-3" asp-for="IsPublished" />&nbsp; Publish?
                </label>
            </div>
            <input type="submit" value="Create" class="btn btn-primary" />
        </div>
    </form>
    <div class="mt-5">
        <a asp-action="AdminPage">Back to List</a>
    </div>
</main>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="https://cdn.ckeditor.com/ckeditor5/35.0.1/super-build/ckeditor.js"></script>
    <script>
        CKEDITOR.ClassicEditor.create(document.querySelector(".editor"), {
            toolbar: {
                items: [
                    'findAndReplace', 'selectAll', '|',
                    'heading', '|',
                    'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'removeFormat', '|',
                    'bulletedList', 'numberedList', 'todoList', '|',
                    'outdent', 'indent', '|',
                    'undo', 'redo',
                    '-',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'highlight', '|',
                    'alignment', '|',
                    'link', 'insertImage', 'blockQuote', 'insertTable', 'mediaEmbed', 'codeBlock', 'htmlEmbed', '|',
                    'specialCharacters', 'horizontalLine', 'pageBreak', '|',
                    'textPartLanguage', '|',
                    'sourceEditing'
                ],
                shouldNotGroupWhenFull: true
            },
            list: {
                properties: {
                    styles: true,
                    startIndex: true,
                    reversed: true
                }
            },
            heading: {
                options: [
                    { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                    { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                    { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                    { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                    { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                    { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                    { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' }
                ]
            },
            fontFamily: {
                options: [
                    'default',
                    'Arial, Helvetica, sans-serif',
                    'Courier New, Courier, monospace',
                    'Georgia, serif',
                    'Lucida Sans Unicode, Lucida Grande, sans-serif',
                    'Tahoma, Geneva, sans-serif',
                    'Times New Roman, Times, serif',
                    'Trebuchet MS, Helvetica, sans-serif',
                    'Verdana, Geneva, sans-serif'
                ],
                supportAllValues: true
            },
            fontSize: {
                options: [10, 12, 14, 'default', 18, 20, 22],
                supportAllValues: true
            },
            htmlSupport: {
                allow: [
                    {
                        name: /.*/,
                        attributes: true,
                        classes: true,
                        styles: true
                    }
                ]
            },
            htmlEmbed: {
                showPreviews: true
            },
            link: {
                decorators: {
                    addTargetToExternalLinks: true,
                    defaultProtocol: 'https://',
                }
            },
            removePlugins: [
                'CKBox',
                'CKFinder',
                //'EasyImage',
                'RealTimeCollaborativeComments',
                'RealTimeCollaborativeTrackChanges',
                'RealTimeCollaborativeRevisionHistory',
                'PresenceList',
                'Comments',
                'TrackChanges',
                'TrackChangesData',
                'RevisionHistory',
                'Pagination',
                'WProofreader',
                // Careful, with the Mathtype plugin CKEditor will not load when loading this sample
                // from a local file system (file://) - load this site via HTTP server if you enable MathType
                'MathType'
            ]
        });
    </script>

    <script>
        function addTag(el) {
            let input = document.getElementById('tagInput');

            if (el.classList.contains('disabledTag')) 
            {
                input.focus();
                return;
            }

            let tagName = el.textContent + ', ';

            let currentTags = input.value.split(',');

            //remove partially entered tag
            currentTags.pop();

            //add the full tag name of the clicked tag
            currentTags.push(tagName);

            input.value = currentTags.reduce( (inputString, currentString) => inputString + ', ' + currentString.trim() );

            el.classList.add('disabledTag');

            input.focus();
        }

        // override the jQuery ":contains" selector to make it case insensitive
        jQuery.expr[':'].contains = function (a, i, m) {
            return $(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
        };

        $(document).ready(function() {
            // show tag cloud when the input is focused
            $('#tagInput').focus(function() {
                $('.tagcloud').show(300);
            });

            $('form *:not("#tagInput")').focus(function() {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
                
            });

            // search tag cloud
            $('#tagInput').keyup(function() {
                // clear all disabledTag classes
                $('.disabledTag').each(function() {
                    $(this).removeClass('disabledTag');
                });

                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();

                $( '.tagcloud > a:not( :contains(' + searchString + ') )' ).hide();
                $( '.tagcloud > a:contains(' + searchString + ')' ).show();

                inputTags.forEach(tag => {
                    if (tag.trim() == '') return;

                    let containingTag = $('.tagcloud > a:contains(' + tag.trim() + ')')
                    if (containingTag.text().toLowerCase() == tag.trim().toLowerCase()) {

                        containingTag.addClass('disabledTag');

                    }
                });


            })

        });
    </script>
}
